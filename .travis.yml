language: generic
compiler: gcc
os: linux
dist: bionic
sudo: required

branches:
  only:
  - master

notifications:
  email:
    recipients:
      - liuyangzhuan@lbl.gov
    on_failure: always
    on_success: always
  slack:
    rooms:
      - ecpsparsesolvers:nBWC0jcAd7B1j9whHUYcaVJO
    on_failure: never
    on_success: never

env:
  matrix:
  - TEST_NUMBER=1"
git:
  depth: 1

before_install:
  - export BLUE="\033[34;1m"
  - mkdir -p installDir
  - printf  "${BLUE} GC; Installing gcc-9 via apt\n"
  - sudo apt-get update
  - sudo apt-get install build-essential software-properties-common -y
  - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
  - sudo apt-get update
  - sudo apt-get install gcc-9 g++-9 -y
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9
  - export CXX="g++-9"
  - export CC="gcc-9"
  - printf "${BLUE} GC; Done installing gcc-9 via apt\n"

  - printf "${BLUE} GC; Installing gfortran via apt\n"
  - sudo apt-get install gfortran-9 -y
  - sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-9 60
  - export FC="gfortran-9"
  - printf "${BLUE} GC; Done installing gfortran via apt\n"

    
  - printf "${BLUE} GC; Installing python3.7.1 with gcc-9\n"
  - wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tgz
  - tar -xvf Python-3.7.1.tgz
  - cd Python-3.7.1
  - ./configure --prefix=$PWD CC=$CC
  - make -j8
  - make install
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installDir/Python-3.7.1/lib  
  - export PATH=$PATH:$TRAVIS_BUILD_DIR/installDir/Python-3.7.1/bin
  - export PYTHONHOME=$PYTHONHOME:$TRAVIS_BUILD_DIR/installDir/Python-3.7.1/
  - printf "${BLUE} GC; Done Installing python3.7.1 with gcc-9\n"


  - printf "${BLUE} GC; Installing bzip2 apt\n"
  - sudo apt-get install bzip2
  - printf "${BLUE} GC; Done installing bzip2 apt\n"
  
  
  - printf "${BLUE} GC; Installing openmpi\n"
  - cd $TRAVIS_BUILD_DIR/installDir
  - wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.bz2
  - bzip2 -d openmpi-4.0.1.tar.bz2
  - tar -xvf openmpi-4.0.1.tar
  - cd openmpi-4.0.1/
  - ./configure --prefix=$PWD --enable-mpi-interface-warning --enable-shared --enable-static --enable-cxx-exceptions CC=$CC CXX=$CXX F77=$FC FC=$FC --enable-mpi1-compatibility 
  - make -j8 
  - make install  
  - sudo cp -r $TRAVIS_BUILD_DIR/installDir/openmpi-4.0.1/lib/* /usr/lib/x86_64-linux-gnu/.
  - export MPICC="$PWD/bin/mpicc"
  - export MPICXX="$PWD/bin/mpicxx"
  - export MPIF90="$PWD/bin/mpif90"
  - export MPIRUN="$PWD/bin/mpirun"
  - printf "${BLUE} GC; Done installing openmpi\n"
  
  - printf "${BLUE} GC; Installing BLASfrom apt\n"
  - sudo apt-get install libblas-dev 
  - export BLAS_LIB=/usr/lib/x86_64-linux-gnu/libblas.so
  - printf "${BLUE} GC; Done installing BLASfrom apt\n"

  - printf "${BLUE} GC; Installing LAPACKfrom apt\n"
  - sudo apt-get install liblapack-dev
  - export LAPACK_LIB=/usr/lib/x86_64-linux-gnu/liblapack.so
  - printf "${BLUE} GC; Done installing LAPACKfrom apt\n"
  
  - printf "${BLUE} GC; Installing ScaLAPACK from source\n"
  - cd $TRAVIS_BUILD_DIR/installDir
  - wget http://www.netlib.org/scalapack/scalapack-2.0.2.tgz
  - tar -xf scalapack-2.0.2.tgz
  - cd scalapack-2.0.2
  - rm -rf build
  - mkdir -p build
  - cd build
  - |
    cmake .. \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_C_COMPILER=$MPICC \
    -DCMAKE_Fortran_COMPILER=$MPIF90 \
    -DCMAKE_INSTALL_PREFIX=. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DCMAKE_Fortran_FLAGS="-fopenmp" \
    -DBLAS_LIBRARIES="$BLAS_LIB" \
    -DLAPACK_LIBRARIES="$LAPACK_LIB"
  - make
  - sudo cp $TRAVIS_BUILD_DIR/installDir/scalapack-2.0.2/build/lib/libscalapack.so /usr/lib/x86_64-linux-gnu/.
  - export SCALAPACK_LIB="/usr/lib/x86_64-linux-gnu/libscalapack.so"  
  - printf "${BLUE} GC; Done installing ScaLAPACK from source\n"
  
install:
  - export BLUE="\033[34;1m"
  - printf "${BLUE} GC; Installing GPtune from source\n"
  - cd $TRAVIS_BUILD_DIR
  - export PYTHONPATH="$PYTHONPATH:$TRAVIS_BUILD_DIR/autotune/"
  - export PYTHONPATH="$PYTHONPATH:$TRAVIS_BUILD_DIR/scikit-optimize/"
  - export PYTHONPATH="$PYTHONPATH:$TRAVIS_BUILD_DIR/mpi4py/"
  - export PYTHONWARNINGS=ignore


  - env CC=$MPICC pip install -r requirements.txt

  - mkdir -p build
  - cd build
  - rm -rf CMakeCache.txt
  - rm -rf DartConfiguration.tcl
  - rm -rf CTestTestfile.cmake
  - rm -rf cmake_install.cmake
  - rm -rf CMakeFiles
  - |
    cmake .. \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_CXX_COMPILER=$MPICXX \
    -DCMAKE_C_COMPILER=$MPICC \
    -DCMAKE_Fortran_COMPILER=$MPIF90 \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DTPL_BLAS_LIBRARIES="$BLAS_LIB" \
    -DTPL_LAPACK_LIBRARIES="$LAPACK_LIB" \
    -DTPL_SCALAPACK_LIBRARIES=$SCALAPACK_LIB
  - make
  - cp lib_gptuneclcm.so ../.
  - cp pdqrdriver ../



  - cd ../examples/
  - git clone https://github.com/xiaoyeli/superlu_dist.git
  - cd superlu_dist

  - wget http://glaros.dtc.umn.edu/gkhome/fetch/sw/parmetis/parmetis-4.0.3.tar.gz
  - tar -xf parmetis-4.0.3.tar.gz
  - cd parmetis-4.0.3/
  - mkdir -p install
  - make config shared=1 cc=$MPICC cxx=$MPICXX prefix=$PWD/install
  - make install > make_parmetis_install.log 2>&1

  - cd ../
  - PARMETIS_INCLUDE_DIRS="$PWD/parmetis-4.0.3/metis/include;$PWD/parmetis-4.0.3/install/include"
  - PARMETIS_LIBRARIES=$PWD/parmetis-4.0.3/install/lib/libparmetis.so
  - mkdir -p build
  - cd build
  - |
    cmake .. \
    -DCMAKE_CXX_FLAGS="-Ofast -std=c++11 -DAdd_ -DRELEASE" \
    -DCMAKE_C_FLAGS="-std=c11 -DPRNTlevel=0 -DPROFlevel=0 -DDEBUGlevel=0" \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_CXX_COMPILER=$MPICXX \
    -DCMAKE_C_COMPILER=$MPICC \
    -DCMAKE_Fortran_COMPILER=$MPIF90 \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DTPL_BLAS_LIBRARIES="$BLAS_LIB" \
    -DTPL_LAPACK_LIBRARIES="$LAPACK_LIB" \
    -DTPL_PARMETIS_INCLUDE_DIRS=$PARMETIS_INCLUDE_DIRS \
    -DTPL_PARMETIS_LIBRARIES=$PARMETIS_LIBRARIES
  - make pddrive_spawn



  - cd ../../../
  - rm -rf mpi4py
  - git clone https://github.com/mpi4py/mpi4py.git
  - cd mpi4py/
  - python setup.py build --mpicc="$MPICC -shared"
  - python setup.py install
  - env CC=$MPICC pip install -e .

  - cd ../
  - rm -rf scikit-optimize
  - git clone https://github.com/scikit-optimize/scikit-optimize.git
  - cd scikit-optimize/
  - env CC=$MPICC pip install -e .

  - cd ../
  - rm -rf autotune
  - git clone https://github.com/ytopt-team/autotune.git
  - cd autotune/
  - env CC=$MPICC pip install -e .
  - printf "${BLUE} GC; Done installing GPtune from source\n"


script:
  - cd $TRAVIS_BUILD_DIR/examples
  - $MPIRUN --allow-run-as-root --oversubscribe -n 1 python3.7 ./demo.py
  - $MPIRUN --allow-run-as-root --oversubscribe -n 1 python3.7 ./scalapack.py -mmax 1000 -nmax 1000 -nodes 1 -cores 4 -ntask 10 -nrun 10 -machine travis -jobid 0
  - $MPIRUN --allow-run-as-root --oversubscribe -n 1 python3.7 ./superlu.py -nodes 1 -cores 4 -ntask 1 -nrun 4 -machine travis 
